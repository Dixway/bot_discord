import discord, asyncio
from discord import colour
from discord.ext import commands
from discord_components import DiscordComponents, Button, ButtonStyle, InteractionEventType

class Help(commands.Cog):

    def __init__(self, client):
        self.client = client
        DiscordComponents(self.client)
        self.client.remove_command("help")




    async def create_embed(self):
        embed = discord.Embed(
            title="Modération",
            colour=discord.Colour.red()
        )

        embed.set_thumbnail(url="https://cdn.discordapp.com/emojis/868297057532797009.png?size=96")
        embed.add_field(name="`&ban <membre> [raison]`", value="Cette commande permet de bannir un membre !", inline=False)
        embed.add_field(name="`&unban <membre>`", value="Cette commande permet de débannir un membre !", inline=False)
        embed.add_field(name="`&banlist`", value="Cette commande permet d'observer la liste des membres bannies !", inline=False)
        embed.add_field(name="`&kick <membre> [raison]`", value="Cette commande permet de d'expulser un membre !", inline=False)
        embed.add_field(name="`&warn <membre> [raison]`", value="Cette commande permet de signaler un membre !", inline=False)
        embed.add_field(name="`&addrole <rôle>`", value="Cette commande d'ajouter un rôle à un membre !", inline=False)
        embed.add_field(name="`&delrole <rôle>`", value="Cette commande permet de retirer un rôle à un membre !", inline=False)
        embed.add_field(name="`&snipe`", value="Cette commande permet de voir le dernier message supprimé !s", inline=False)
        embed.set_footer(text='Page d\'aide')
        return embed

    @commands.command()
    async def help(self, ctx):
        
        embedOne = await self.create_embed()

        embedTwo = discord.Embed(title = 'Anti Raid', colour=discord.Colour.red())
        embedTwo.add_field(name = '`&antilink`', value = 'Permet d\'éviter les pubs ... ', inline = False)
        embedTwo.add_field(name = '`&antilink`', value = 'Permet d\'éviter les pubs ... ', inline = False)
        embedTwo.add_field(name = '`&antilink`', value = 'Permet d\'éviter les pubs ... ', inline = False)
        embedTwo.add_field(name = '`&antilink`', value = 'Permet d\'éviter les pubs ... ', inline = False)
        embedTwo.add_field(name = '`&antilink`', value = 'Permet d\'éviter les pubs ... ', inline = False)
        embedTwo.add_field(name = '`&antilink`', value = 'Permet d\'éviter les pubs ... ', inline = False)
        embedTwo.add_field(name = '`&antilink`', value = 'Permet d\'éviter les pubs ... ', inline = False)





        embedThree = discord.Embed(
            title = "Page #3",
            description = "This is page three!"
        )

        paginationList = [embedOne, embedTwo, embedThree]

        current = 0

        mainMessage = await ctx.reply(
            embed = paginationList[current],
            components = [ #Use any button style you wish to :)
                [
                    Button(
                        label= "◀",
                        id = "back",
                        style = ButtonStyle.gray
                    ),
                    Button(
                        label = "▶",
                        id = "front",
                        style = ButtonStyle.gray
                    )
                ]
            ]
        )

        while True:
            #Try and except blocks to catch timeout and break
            try:
                interaction = await self.client.wait_for(
                    "button_click",
                    check = lambda i: i.component.id in ["back", "front"], #You can add more
                    timeout = 10.0 #10 seconds of inactivity
                )



                #Getting the right list index
                if interaction.component.id == "back":
                    current -= 1
                elif interaction.component.id == "front":
                    current += 1
                #If its out of index, go back to start / end
                if current == len(paginationList):
                    current = 0
                elif current < 0:
                    current = len(paginationList) - 1

                await interaction.respond(
                    type = 7,
                    embed = paginationList[current],
                    components = [
                        [
                            Button(
                                label = "Prev",
                                id = "back",
                                style = ButtonStyle.red
                            ),
                            Button(
                                label = "Next",
                                id = "front",
                                style = ButtonStyle.red
                            )
                        ]
                    ]
                )
            except asyncio.TimeoutError:
                #Disable and get outta here
                await mainMessage.edit(
                    components = [
                        [
                            Button(
                                label = "Prev",
                                id = "back",
                                style = ButtonStyle.red,
                                disabled = True
                            ),
                            Button(
                                label = "Next",
                                id = "front",
                                style = ButtonStyle.red,
                                disabled = True
                            )
                        ]
                    ]
                )
                break


def setup(client):
    client.add_cog(Help(client))

